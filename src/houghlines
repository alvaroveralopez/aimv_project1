import cv2 as cv
import numpy as np
import sys
import skimage
from functools import partial  
from skimage import filters
import math
import pandas as pn
from matplotlib import pyplot as plt
import tkinter as tk
from tkinter import filedialog
import glob
global edges

import os
# Global variables (be careful because variables in this list are used in the functions, 
# so these functions can not be copied to another program as they are here...you would need to modify them)


window_name = "Edge Map"
standard_name = "Standard Hough Lines Demo"
min_threshold = 50
alpha = 1000
lines=[]

 # Función para calcular el ángulo de una línea

def cambio_angulos(theta):
    angle_degrees = np.degrees(theta)
    # Asegurarse de que el ángulo esté en el primer cuadrante
    if angle_degrees >= 90:
        angle_degrees = 180 - angle_degrees
    return angle_degrees




def Standard_Hough(edges):
    standard_hough = cv.cvtColor(edges, cv.COLOR_GRAY2BGR) #make a copy
    # Use Standard Hough Transform
    rho=[]
    theta=[]
    points=[]
    angles=[]

    s_lines = cv.HoughLines(edges, 1, np.pi / 90, min_threshold )
    print(f"{s_lines}")
    # Show the result
    for line in s_lines:
        r = line[0][0]
        t = line[0][1]
        a = np.cos(t)
        b = np.sin(t)
        x0 = a * r
        y0 = b * r
        pt1 = (round(x0 - alpha * b), round(y0 + alpha * a))
        pt2 = (round(x0 + alpha * b), round(y0 - alpha * a))
        points.append([pt1, pt2])
        cv.line(standard_hough, pt1, pt2, (255, 0, 0), 2)
        


    # Extraer los valores de rho y theta de cada línea y almacenarlos en las listas
    for line in s_lines:
        r, t = line[0]
        a=cambio_angulos(t)
        rho.append(r)
        theta.append(t)
        angles.append(a)
    
    cv.imshow(standard_name, standard_hough)
    return s_lines,rho,theta,angles,points


#########################
###  Main program #######
bgModel_RGB = cv.createBackgroundSubtractorMOG2()
imgRGB = cv.imread('C:/Users/Usuario/Desktop/AIMV/Project I/Basic Bricks/tcol1.bmp')

#print(f"\n\n\nimRGB: {imgRGB}\n\n\n")
edges = cv.cvtColor(imgRGB, cv.COLOR_BGR2GRAY)
edges1 = cv.GaussianBlur(edges, (31, 31), 4)
edges = cv.Canny(edges1, 40, 50, 3)
cv.imshow('frame', imgRGB)  # Mostrar los fotogramas del video
cv.waitKey(0)
cv.destroyAllWindows()
cv.imshow('edges', edges)  # Mostrar los bordes del video
cv.waitKey(0)
cv.destroyAllWindows()
a=edges
[s_lines,rho,theta,angle,points] = Standard_Hough(edges)
cv.waitKey(0)

# Inicializar listas para almacenar grupos de líneas paralelas
line_groups = []

i=0
for line in s_lines:

    print(f"Houghlines: Rho {rho[i]}, Theta: {theta[i]}, Point1: {points[i]}, angle: {angle[i]}")
    i+=1


angle_tolerance = 10
i=0
group0=[]
group30=[]
group60=[]
group90=[]
i=0
for angl in angle:
#         # Verificar si esta línea es paralela a las líneas en el grupo
         if angl<=angle_tolerance:
             group0.append(i)
         elif angl>= 15 +angle_tolerance and angl <= angle_tolerance+45:
             group30.append(i)
         elif angl >= angle_tolerance+45 and angl<= angle_tolerance+75:
             group60.append(i)
         elif angl>= angle_tolerance+75 and  angl<= 90:
             group90.append(i)
         i+=1
         

print(f"Group 0: {group0}")
print(f"Group 30: {group30}")
print(f"Group 60: {group60}")
print(f"Group 90: {group90}")


#             group.append(line)
#             grouped = True
#             break

#     if not grouped:
#         line_groups.append([line])

# print(f"{line_groups}")





